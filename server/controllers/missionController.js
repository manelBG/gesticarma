import { sendNotification } from '../utils/sendNotification.js';
import User from '../models/User.js';
import Mission from '../models/Mission.js'; // Assure-toi d'importer le mod√®le Mission
import Vehicule from '../models/Vehicule.js';

// ‚úîÔ∏è Cr√©er une mission et envoyer une notification au directeur
export const createMission = async (req, res) => {
  try {
    const mission = new Mission(req.body);
    await mission.save();

    // ‚úÖ Notification au directeur
    const directeur = await User.findOne({ role: "directeur" });
    if (directeur) {
      await sendNotification(
        directeur._id,
        "mission",
        `Une nouvelle mission a √©t√© cr√©√©e par l'employ√© ${mission.employee} pour le v√©hicule ${mission.vehicule}.`
      );
    }

    // ‚úÖ Mise √† jour du statut du v√©hicule
    await Vehicule.findByIdAndUpdate(mission.vehicule, {
      statut: "En mission",
    });

    res.status(201).json(mission);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
};


// ‚úîÔ∏è Mettre √† jour une mission (et notifier l‚Äôemploy√©)
export const updateMission = async (req, res) => {
  try {
    const updatedMission = await Mission.findByIdAndUpdate(req.params.id, req.body, { new: true }).populate('employee vehicule');

    if (!updatedMission) {
      return res.status(404).json({ message: 'Mission non trouv√©e' });
    }

    // ‚úÖ Si le statut a chang√© (valid√©e ou refus√©e), notifier l‚Äôemploy√©
    if (req.body.statut === 'valid√©e' || req.body.statut === 'refus√©e') {
      await sendNotification(
        updatedMission.employee._id,
        'mission',
        `Votre mission pour le v√©hicule ${updatedMission.vehicule.marque} ${updatedMission.vehicule.modele} a √©t√© ${req.body.statut} par le directeur.`
      );
    }

    res.status(200).json(updatedMission);
  } catch (err) {
    res.status(500).json({ message: 'Erreur lors de la mise √† jour de la mission', error: err.message });
  }
};

// ‚úîÔ∏è Supprimer une mission
export const deleteMission = async (req, res) => {
  try {
    const mission = await Mission.findByIdAndDelete(req.params.id);  // Suppression de la mission par son ID
    if (!mission) {
      return res.status(404).json({ message: 'Mission non trouv√©e' });
    }
    res.status(200).json({ message: 'Mission supprim√©e avec succ√®s' });
  } catch (err) {
    res.status(500).json({ message: 'Erreur lors de la suppression de la mission', error: err.message });
  }
};

export const getAllMissions = async (req, res) => {
  try {
    // R√©cup√©rer toutes les missions
    const missions = await Mission.find().populate('employee vehicule'); // populate pour inclure les infos des employ√©s et v√©hicules associ√©s

    // V√©rifie si des missions existent
    if (missions.length === 0) {
      return res.status(404).json({ message: 'Aucune mission trouv√©e' });
    }

    res.status(200).json(missions);  // Retourner les missions r√©cup√©r√©es
  } catch (err) {
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des missions', error: err.message });
  }
};

export const getMissionsByEmployee = async (req, res) => {
  try {
    const employeeId = req.params.id;


    // üîç Logs pour v√©rifier ce qui se passe
    console.log("ID re√ßu :", employeeId);

    const missions = await Mission.find({ employee: employeeId});
    

    console.log("Missions trouv√©es :", missions);

    res.status(200).json(missions);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des missions :", error);
    res.status(500).json({ message: "Erreur serveur" });
  }
};
